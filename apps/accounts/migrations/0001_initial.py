# Generated by Django 3.1 on 2021-08-16 17:39

import apps.accounts.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('bio', models.CharField(blank=True, max_length=300, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('national_code', models.CharField(blank=True, max_length=10, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=30, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('province', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=30, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DiscountCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('value', models.FloatField(validators=[apps.accounts.validators.percentage_validator])),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='EducationalInstitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('institute_type', models.CharField(choices=[('School', 'School'), ('University', 'University'), ('Other', 'Other')], max_length=10)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('province', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=30, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateField(blank=True, null=True)),
                ('is_approved', models.BooleanField(blank=True, null=True)),
                ('date_added', models.DateField(blank=True, null=True)),
            ],
            options={
                'permissions': [('add_admin', 'Can add new admins to educational institute')],
            },
        ),
        migrations.CreateModel(
            name='EventOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('is_participant', models.BooleanField(default=True)),
                ('is_mentor', models.BooleanField(default=False)),
                ('is_event_owner', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, max_length=15, null=True)),
                ('last_name', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=15, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('school', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=20, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('gender', models.CharField(blank=True, default='Male', max_length=10, null=True)),
                ('grade', models.CharField(blank=True, default='ONE', max_length=15, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'db_table': 'auth_user',
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Merchandise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.IntegerField(default=0)),
                ('discounted_price', models.IntegerField(default=None, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scores', models.JSONField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Studentship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studentship_type', models.CharField(choices=[('School', 'School'), ('Academic', 'Academic')], max_length=10)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='studentship_documents/')),
                ('is_document_verified', models.BooleanField(default=False)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_accounts.studentship_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('expiration_date', models.DateTimeField()),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicStudentship',
            fields=[
                ('studentship_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.studentship')),
                ('degree', models.CharField(blank=True, choices=[('BA', 'Ba'), ('MA', 'Ma'), ('PHD', 'Phd'), ('Postdoc', 'Postdoc')], max_length=15, null=True)),
                ('university_major', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('accounts.studentship',),
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('player_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.player')),
                ('selection_doc', models.FileField(blank=True, null=True, upload_to='selection_answers/')),
                ('is_paid', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_participated', models.BooleanField(default=False)),
                ('player_type', models.CharField(max_length=10)),
                ('score', models.IntegerField(default=0)),
            ],
            bases=('accounts.player',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('educationalinstitute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.educationalinstitute')),
                ('principal_name', models.CharField(blank=True, max_length=30, null=True)),
                ('principal_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('school_type', models.CharField(blank=True, choices=[('Elementary', 'Elementary'), ('JuniorHigh', 'Juniorhigh'), ('High', 'High')], max_length=15, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('accounts.educationalinstitute',),
        ),
        migrations.CreateModel(
            name='SchoolStudentship',
            fields=[
                ('studentship_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.studentship')),
                ('grade', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(0)])),
                ('major', models.CharField(blank=True, choices=[('Math', 'Math'), ('Biology', 'Biology'), ('Literature', 'Literature'), ('IslamicStudies', 'Islamicstudies'), ('TechnicalTraining', 'Technicaltraining'), ('Others', 'Others')], max_length=25, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('accounts.studentship',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('player_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.player')),
                ('group_name', models.CharField(blank=True, max_length=200)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('team_code', models.CharField(max_length=10)),
                ('player_type', models.CharField(max_length=10)),
                ('score', models.IntegerField(default=0)),
            ],
            bases=('accounts.player',),
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('educationalinstitute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.educationalinstitute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('accounts.educationalinstitute',),
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('amount', models.IntegerField()),
                ('remaining', models.IntegerField()),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_id', models.CharField(blank=True, max_length=100, null=True)),
                ('amount', models.IntegerField()),
                ('authority', models.CharField(blank=True, max_length=37, null=True)),
                ('status', models.CharField(choices=[('Success', 'Success'), ('Repetitious', 'Repetitious'), ('Failed', 'Failed'), ('Started', 'Started')], default='Started', max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uniq_code', models.CharField(default='', max_length=100)),
                ('discount_code', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='accounts.discountcode')),
                ('merchandise', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='accounts.merchandise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to='accounts.voucher')),
            ],
        ),
    ]
