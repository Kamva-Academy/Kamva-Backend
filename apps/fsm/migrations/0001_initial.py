# Generated by Django 3.1 on 2021-08-16 17:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswerSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_sheet_type', models.CharField(choices=[('RegistrationReceipt', 'Registrationreceipt'), ('FsmStateAnswerSheet', 'Fsmstateanswersheet')], max_length=25)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_fsm.answersheet_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='events/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('Team', 'Team'), ('Individual', 'Individual')], default='Individual', max_length=40)),
                ('team_size', models.IntegerField(default=3)),
                ('maximum_participant', models.IntegerField(blank=True, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to=settings.AUTH_USER_MODEL)),
                ('holder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='accounts.educationalinstitute')),
                ('merchandise', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event', to='accounts.merchandise')),
            ],
        ),
        migrations.CreateModel(
            name='FSM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scores', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='workshop/')),
                ('is_active', models.BooleanField(default=True)),
                ('fsm_learning_type', models.CharField(choices=[('Supervised', 'Supervised'), ('Unsupervised', 'Unsupervised')], default='Unsupervised', max_length=40)),
                ('fsm_p_type', models.CharField(choices=[('Team', 'Team'), ('Individual', 'Individual'), ('Hybrid', 'Hybrid')], default='Individual', max_length=40)),
                ('lock', models.CharField(blank=True, max_length=10, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsms', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fsm.event')),
                ('holder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsms', to='accounts.educationalinstitute')),
                ('merchandise', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsm', to='accounts.merchandise')),
            ],
        ),
        migrations.CreateModel(
            name='FSMEdge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_back_enabled', models.BooleanField(default=True)),
                ('min_score', models.FloatField(default=0.0)),
                ('cost', models.FloatField(default=0.0)),
                ('priority', models.IntegerField()),
                ('lock', models.CharField(blank=True, max_length=10, null=True)),
                ('has_lock', models.BooleanField(default=False)),
                ('text', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_type', models.CharField(choices=[('RegistrationForm', 'Registrationform'), ('Article', 'Article')], max_length=25)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='papers', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_fsm.paper_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('widget_type', models.CharField(choices=[('Game', 'Game'), ('Video', 'Video'), ('Image', 'Image'), ('Description', 'Description'), ('SmallAnswerProblem', 'Smallanswerproblem'), ('BigAnswerProblem', 'Biganswerproblem'), ('MultiChoiceProblem', 'Multichoiceproblem'), ('UploadFileProblem', 'Uploadfileproblem')], max_length=30)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widgets', to=settings.AUTH_USER_MODEL)),
                ('duplication_of', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duplications', to='fsm.widget')),
                ('paper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='fsm.paper')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_fsm.widget_set+', to='contenttypes.contenttype')),
            ],
            options={
                'order_with_respect_to': 'paper',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('paper_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.paper')),
                ('description', models.TextField(blank=True, null=True)),
                ('cover_page', models.ImageField(blank=True, null=True, upload_to='workshop/')),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.paper',),
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.widget')),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='FSMState',
            fields=[
                ('paper_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.paper')),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.paper',),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.widget')),
                ('link', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.widget')),
                ('link', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.widget')),
                ('text', models.TextField(blank=True, null=True)),
                ('help_text', models.TextField(blank=True, null=True)),
                ('max_score', models.FloatField(blank=True, null=True)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='RegistrationForm',
            fields=[
                ('paper_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.paper')),
                ('min_grade', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(0)])),
                ('max_grade', models.IntegerField(default=12, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(0)])),
                ('deadline', models.DateTimeField(null=True)),
                ('conditions', models.TextField(blank=True, null=True)),
                ('accepting_status', models.CharField(choices=[('AutoAccept', 'Autoaccept'), ('CorrectAccept', 'Correctaccept'), ('Manual', 'Manual')], default='AutoAccept', max_length=15)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.paper',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('widget_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.widget')),
                ('link', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.widget',),
        ),
        migrations.CreateModel(
            name='PlayerWorkshop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_visit', models.DateTimeField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_workshop', to='accounts.player')),
                ('workshop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_workshop', to='fsm.fsm')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('inward_edge', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fsm.fsmedge')),
                ('player_workshop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='fsm.playerworkshop')),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='fsm.choice')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_type', models.CharField(choices=[('SmallAnswer', 'Smallanswer'), ('BigAnswer', 'Biganswer'), ('MultiChoiceAnswer', 'Multichoiceanswer'), ('UploadFileAnswer', 'Uploadfileanswer')], max_length=20)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('is_final_answer', models.BooleanField(default=False)),
                ('is_solution', models.BooleanField(default=False)),
                ('answer_sheet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers', to='fsm.answersheet')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_fsm.answer_set+', to='contenttypes.contenttype')),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('value', models.BooleanField()),
                ('edge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='fsm.fsmedge')),
                ('player_history', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='fsm.playerhistory')),
            ],
        ),
        migrations.CreateModel(
            name='BigAnswerProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.problem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='MainState',
            fields=[
                ('fsmstate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.fsmstate')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.fsmstate',),
        ),
        migrations.CreateModel(
            name='MultiChoiceProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.problem')),
                ('max_choices', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='SmallAnswerProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.problem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='UploadFileProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.problem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.problem',),
        ),
        migrations.CreateModel(
            name='SubmittedAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish_date', models.DateTimeField(blank=True, null=True)),
                ('answer', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='fsm.answer')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_answers', to='accounts.player')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_answers', to='fsm.problem')),
            ],
        ),
        migrations.CreateModel(
            name='MultiChoiceAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.answer')),
                ('choices', models.ManyToManyField(through='fsm.ChoiceSelection', to='fsm.Choice')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='fsm.multichoiceproblem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.answer',),
        ),
        migrations.AddField(
            model_name='fsm',
            name='registration_form',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsm', to='fsm.registrationform'),
        ),
        migrations.AddField(
            model_name='event',
            name='registration_form',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event', to='fsm.registrationform'),
        ),
        migrations.AddField(
            model_name='choiceselection',
            name='multi_choice_answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fsm.multichoiceanswer'),
        ),
        migrations.CreateModel(
            name='UploadFileAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.answer')),
                ('answer_file', models.FileField(max_length=4000, upload_to='AnswerFile')),
                ('file_name', models.CharField(max_length=50)),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='fsm.uploadfileproblem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.answer',),
        ),
        migrations.CreateModel(
            name='SmallAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.answer')),
                ('text', models.TextField()),
                ('problem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='fsm.smallanswerproblem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.answer',),
        ),
        migrations.CreateModel(
            name='RegistrationReceipt',
            fields=[
                ('answersheet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.answersheet')),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Rejected', 'Rejected'), ('Waiting', 'Waiting')], default='Waiting', max_length=25)),
                ('is_participating', models.BooleanField(default=False)),
                ('answer_sheet_of', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_receipts', to='fsm.registrationform')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registration_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('answer_sheet_of', 'user')},
            },
            bases=('fsm.answersheet',),
        ),
        migrations.AddField(
            model_name='playerworkshop',
            name='current_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player_workshop', to='fsm.mainstate'),
        ),
        migrations.AddField(
            model_name='playerhistory',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_histories', to='fsm.mainstate'),
        ),
        migrations.AddField(
            model_name='mainstate',
            name='fsm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='fsm.fsm'),
        ),
        migrations.CreateModel(
            name='HelpState',
            fields=[
                ('fsmstate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.fsmstate')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_states', to='fsm.mainstate')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.fsmstate',),
        ),
        migrations.AddField(
            model_name='fsmedge',
            name='head',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inward_edges', to='fsm.mainstate'),
        ),
        migrations.AddField(
            model_name='fsmedge',
            name='tail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outward_edges', to='fsm.mainstate'),
        ),
        migrations.AddField(
            model_name='fsm',
            name='first_state',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_fsm', to='fsm.mainstate'),
        ),
        migrations.AddField(
            model_name='choice',
            name='problem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='fsm.multichoiceproblem'),
        ),
        migrations.CreateModel(
            name='BigAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fsm.answer')),
                ('text', models.TextField()),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='fsm.biganswerproblem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('fsm.answer',),
        ),
    ]
